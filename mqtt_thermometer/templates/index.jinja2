<!DOCTYPE html>
<html>

<head>
    <title>Temperatures</title>
    <link rel="stylesheet" href="static/styles.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
    <script src="https://unpkg.com/htmx.org@1.9.6"></script>
    <script
        src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script src="https://unpkg.com/htmx.org@1.9.11/dist/ext/ws.js"></script>
</head>

<body>
    <div hx-ext="ws" ws-connect="ws">
        <div id="legends"></div>
    </div>

    <div hx-trigger="load, every 60s" hx-get="temperatures" hx-swap="none" hx-ext="Chartjs"
        style="position: relative; height: 85vh; width: 95vw;">
        <canvas id="chart"></canvas>
    </div>

    <script>

        Chart.defaults.font.size = 24;

        const chart = new Chart(
            document.getElementById('chart'),
            {
                type: 'line',
                data: {},
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            // suggestedMin: -5,
                            // suggestedMax: 25,
                            position: 'right',
                            ticks: {
                                stepSize: 5,
                                callback: function (value, index, values) {
                                    return value + ' Â°C';
                                },
                                color: 'rgba(255, 255, 255, 1)'
                            },
                            grid: {
                                color: function (context) {
                                    if (context.tick.value % 10 === 0) {
                                        return 'rgba(255, 255, 255, 1)';
                                    }
                                    return 'rgba(255, 255, 255, 0.2)';
                                }
                            }
                        },
                        x: {
                            type: 'time',
                            time: {
                                unit: 'hour',
                                displayFormats: {
                                    hour: 'H'
                                }
                            },
                            ticks: {
                                color: 'rgba(255, 255, 255, 1)'
                            },
                            grid: {
                                color: function (context) {
                                    if (new Date(context.tick.value).getHours() % 12 === 0) {
                                        return 'rgba(255, 255, 255, 1)';
                                    }
                                    if (new Date(context.tick.value).getHours() % 3 === 0) {
                                        return 'rgba(255, 255, 255, 0.5)';
                                    }
                                    return 'rgba(255, 255, 255, 0.2)';
                                }
                            }
                        }
                    },
                    elements: {
                        point: {
                            radius: 0
                        }
                    },
                    animation: {
                        duration: 0
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            }
        );

        htmx.defineExtension('Chartjs', {
            transformResponse: function (text, xhr, elt) {
                var data = JSON.parse(text);
                var ctx = document.getElementById('chart').getContext('2d');
                chart.data = data;
                chart.update();
                return "";
            }
        });

    </script>



</body>

</html>
